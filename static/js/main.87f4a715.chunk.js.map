{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/ErrorNotification/ErrorNotification.module.css","components/Filter/Filter.module.css","App.module.css","redux/listActions.js","components/ErrorNotification/ErrorNotification.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","redux/listReducer.js","redux/store.js","index.js"],"names":["module","exports","addContact","createAction","name","number","payload","contact","id","uuidv4","removeContact","filterContact","ErrNot","contactAdded","CSSTransition","in","timeout","classNames","styles","unmountOnExit","className","container","text","ContactForm","state","handleChange","target","setState","value","handleSubmit","event","preventDefault","props","list","some","setTimeout","this","action","onSubmit","contactForm","htmlFor","contactFormLabel","type","placeholder","onChange","contactFormBtn","Component","mapDispatchToProps","newContact","connect","contacts","items","ContactList","prevProps","prevState","localStorage","setItem","JSON","stringify","TransitionGroup","component","TaskList","map","e","contactListItem","onClick","deleteList","contactListBtn","listActions","filter","toLowerCase","includes","filterRender","listAction","appear","App","title","Filter","INITIAL_STATE","parse","getItem","createReducer","combineReducers","store","configureStore","reducer","contactsReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.87f4a715.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__4vZ1D\",\"contactFormLabel\":\"ContactForm_contactFormLabel__3hIe5\",\"contactFormBtn\":\"ContactForm_contactFormBtn__3Ptm5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskList\":\"ContactList_TaskList__3sciv\",\"contactListItem\":\"ContactList_contactListItem__1m61L\",\"contactListBtn\":\"ContactList_contactListBtn__2PMfn\",\"enter\":\"ContactList_enter__39_1u\",\"enterActive\":\"ContactList_enterActive__1gEql\",\"exit\":\"ContactList_exit__U57Li\",\"exitActive\":\"ContactList_exitActive__sP3Yz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ErrorNotification_container__1l-4M\",\"text\":\"ErrorNotification_text__3zb3Q\",\"enter\":\"ErrorNotification_enter__1vaWO\",\"enterActive\":\"ErrorNotification_enterActive__1k4us\",\"exit\":\"ErrorNotification_exit__1ZnuU\",\"exitActive\":\"ErrorNotification_exitActive__2jCDH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactFormLabel\":\"Filter_contactFormLabel__2hMnc\",\"appear\":\"Filter_appear__3D3fd\",\"appearActive\":\"Filter_appearActive__2U4YH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"App_appear__19_DN\",\"appearActive\":\"App_appearActive__1hZjb\",\"title\":\"App_title__3i8_k\"};","import { v4 as uuidv4 } from \"uuid\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContact = createAction(\"ADD_CONTACT\", ({ name, number }) => ({\r\n  payload: {\r\n    contact: { id: uuidv4(), name, number },\r\n  },\r\n}));\r\n\r\nconst removeContact = createAction(\"REMOVE_CONTACT\");\r\n\r\nconst filterContact = createAction(\"FILTER_CONTACTS\");\r\n\r\nexport default { addContact, removeContact, filterContact };\r\n","import React from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport styles from \"./ErrorNotification.module.css\";\r\n\r\nconst ErrNot = ({ contactAdded }) => {\r\n  return (\r\n    <CSSTransition\r\n      in={contactAdded}\r\n      timeout={250}\r\n      classNames={styles}\r\n      unmountOnExit\r\n    >\r\n      <div className={styles.container}>\r\n        <p className={styles.text}>Contact already declared</p>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\nexport default ErrNot;\r\n","import React, { Component } from \"react\";\nimport styles from \"./ContactForm.module.css\";\nimport { connect } from \"react-redux\";\nimport newContact from \"../../redux/listActions.js\";\nimport ErrNot from \"../ErrorNotification/ErrorNotification\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n    contactAdded: false,\n  };\n\n  handleChange = ({ target }) => {\n    this.setState({\n      [target.name]: target.value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const rule = this.props.list.some(\n      (contact) => contact.name === this.state.name\n    );\n    if (rule) {\n      this.setState({ contactAdded: true });\n      setTimeout(() => this.setState({ contactAdded: false }), 2000);\n      return;\n    }\n    this.props.addContact({ ...this.state });\n    this.setState({\n      name: \"\",\n      number: \"\",\n    });\n  };\n\n  render() {\n    const { name, number, contactAdded } = this.state;\n    return (\n      <>\n        <ErrNot contactAdded={contactAdded} />\n        <form\n          action=\"submit\"\n          onSubmit={this.handleSubmit}\n          className={styles.contactForm}\n        >\n          <label htmlFor=\"name\" className={styles.contactFormLabel}>\n            Name\n          </label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            placeholder=\"name\"\n            onChange={this.handleChange}\n          />\n          <label htmlFor=\"number\" className={styles.contactFormLabel}>\n            Number\n          </label>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"number\"\n            value={number}\n            onChange={this.handleChange}\n          />\n          <input\n            type=\"submit\"\n            value=\"Add contact\"\n            className={styles.contactFormBtn}\n          />\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  list: state.contacts.items,\n});\n\nconst mapDispatchToProps = {\n  addContact: newContact.addContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./ContactList.module.css\";\nimport { connect } from \"react-redux\";\nimport listActions from \"../../redux/listActions\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nclass ContactList extends Component {\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.list !== this.props.list) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.props.list));\n    }\n  }\n\n  render() {\n    return (\n      <TransitionGroup component=\"ul\" className={styles.TaskList}>\n        {this.props.list.map((e) => {\n          return (\n            <CSSTransition key={e.id} timeout={250} classNames={styles}>\n              <li className={styles.contactListItem}>\n                {e.name} : {e.number}\n                <button\n                  type=\"button\"\n                  onClick={() => this.props.deleteList(e.id)}\n                  className={styles.contactListBtn}\n                >\n                  Удалить\n                </button>\n              </li>\n            </CSSTransition>\n          );\n        })}\n      </TransitionGroup>\n    );\n  }\n}\n\nContactList.propTypes = {\n  deleteList: PropTypes.func.isRequired,\n  list: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nconst mapStateToProps = (state) => ({\n  list: state.contacts.items.filter((contact) =>\n    contact.name.toLowerCase().includes(state.contacts.filter.toLowerCase())\n  ),\n});\n\nconst mapDispatchToProps = {\n  deleteList: listActions.removeContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Filter.module.css\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport listAction from \"../../redux/listActions.js\";\n\nconst FilterName = ({ filterRender, filter }) => (\n  <CSSTransition\n    in={true}\n    appear={true}\n    timeout={500}\n    classNames={styles}\n    unmountOnExit\n  >\n    <div>\n      <label htmlFor=\"name\" className={styles.contactFormLabel}>\n        Find contacts by name\n      </label>\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={(e) => filterRender(e.target.value)}\n      />\n    </div>\n  </CSSTransition>\n);\n\nFilterName.propTypes = {\n  filterRender: PropTypes.func.isRequired,\n  filter: PropTypes.string,\n};\n\nconst mapStateToProps = (state) => ({\n  filter: state.contacts.filter,\n});\n\nconst mapDispatchToProps = {\n  filterRender: listAction.filterContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterName);\n","import React, { Component } from \"react\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport Filter from \"./components/Filter/Filter\";\nimport styles from \"./App.module.css\";\nimport { CSSTransition } from \"react-transition-group\";\n\nexport default class App extends Component {\n  // componentDidMount() {\n  //   const localList = localStorage.getItem(\"contacts\");\n  //   if (localList) {\n  //     this.setState({ contacts: JSON.parse(localList) });\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (prevState.contacts !== this.state.contacts) {\n  //     localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  // toAddContact = (el) => {\n  //   const { contacts } = this.state;\n  //   const rule = contacts.some((contact) => contact.name === el.name);\n  //   if (rule) {\n  //     this.setState({ contactAdded: true });\n  //     setTimeout(() => this.setState({ contactAdded: false }), 2000);\n  //     return;\n  //   } else if (el.name.length >= 1) {\n  //     this.setState((prev) => {\n  //       const updateState = [...prev.contacts, el];\n  //       return { contacts: updateState };\n  //     });\n  //   }\n  // };\n\n  // filterRender = (filter) => {\n  //   this.setState({ filter });\n  // };\n\n  // filtresTask() {\n  //   const { contacts, filter } = this.state;\n  //   return contacts.filter((contact) =>\n  //     contact.name.toLowerCase().includes(filter.toLowerCase())\n  //   );\n  // }\n\n  // toDeleteContact = (id) => {\n  //   const { contacts } = this.state;\n  //   const obj = contacts.find((el) => el.id === id);\n  //   const index = contacts.indexOf(obj);\n  //   this.setState((prevState) => ({\n  //     contacts: [\n  //       ...prevState.contacts.slice(0, index),\n  //       ...prevState.contacts.slice(index + 1),\n  //     ],\n  //   }));\n  // };\n\n  render() {\n    return (\n      <>\n        <CSSTransition\n          in={true}\n          appear={true}\n          timeout={500}\n          classNames={styles}\n          unmountOnExit\n        >\n          <h1 className={styles.title}>Phonebook</h1>\n        </CSSTransition>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </>\n    );\n  }\n}\n","import { combineReducers } from \"redux\";\r\nimport listAction from \"./listActions\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n\r\nconst defaultContacts = [\r\n  { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\r\n  { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\r\n  { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\r\n  { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\r\n];\r\n\r\nconst localList = JSON.parse(localStorage.getItem(\"contacts\"));\r\n\r\nconst INITIAL_STATE = {\r\n  contacts: localList || defaultContacts,\r\n  filter: \"\",\r\n};\r\n\r\nconst newContact = (state, action) => [...state, action.payload.contact];\r\n\r\nconst removeAnyContact = (state, action) =>\r\n  state.filter((contact) => contact.id !== action.payload);\r\n\r\nconst items = createReducer(INITIAL_STATE.contacts, {\r\n  [listAction.addContact]: newContact,\r\n  [listAction.removeContact]: removeAnyContact,\r\n});\r\n\r\nconst filter = createReducer(INITIAL_STATE.filter, {\r\n  [listAction.filterContact]: (state, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({ items, filter });\r\n","import contactsReducer from \"./listReducer\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}